name: Move issue to Backlog when label added

on:
  issues:
    types:
      - labeled

jobs:
  move_to_backlog:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.PAT_TOKEN }}

      - name: Get Issue
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
          PROJECT_ID: "PVT_kwHOB16rWM4ApMGw"
          FIELD_ID: "PVTSSF_lAHOB16rWM4ApMGwzggoz7Y"
          OPTION_ID: "394f8d2b"
        run: |
          ISSUE_NUMBER=${{ github.event.issue.number }}
          RESPONSE=$(curl -H "Authorization: bearer $PAT_TOKEN" \
                -X POST \
                -H "Content-Type: application/json" \
                -d '{"query":"query { repository(owner: \"'${{ github.repository_owner }}'\", name: \"'${{ github.event.repository.name }}'\") { issue(number: '$ISSUE_NUMBER') { id } } }"}' \
                https://api.github.com/graphql)

          ISSUE_NODE_ID=$(echo "$RESPONSE" | jq -r .data.repository.issue.id)
          LABEL_NAME=${{ github.event.label.name }}
          
          echo "Got the issue id of $ISSUE_NODE_ID"
          echo "ISSUE_NODE_ID=$ISSUE_NODE_ID" >> "$GITHUB_ENV"

      - name: Get ProjectV2 Issue ID
        run: |
          PROJECT_ID="PVT_kwHOB16rWM4ApMGw"
          ISSUE_NODE_ID="${{ steps.get_issue.outputs.ISSUE_NODE_ID }}"

          RESPONSE=$(curl -H "Authorization: bearer $PAT_TOKEN" \
                -X POST \
                -H "Content-Type: application/json" \
                -d "{\"query\": \"query { node(id: \\\"$PROJECT_ID\\\") { ... on ProjectV2 { items(first: 100) { nodes { id content { ... on Issue { id } } } } } } }\"}" \
                https://api.github.com/graphql)

          PROJECT_ITEM_ID=$(echo "$RESPONSE" | jq -r ".data.node.items.nodes[] | select(.content.id == \"$ISSUE_NODE_ID\") | .id")
          echo "ProjectV2 Item ID: $PROJECT_ITEM_ID"

          if [ -z "$PROJECT_ITEM_ID" ]; then
            echo "Error: ProjectV2Item ID not found!"
            exit 1
          fi

          # Schreibe den Wert der ProjectV2Item ID als Ausgabe des Schritts
          echo "ITEM_ID=$PROJECT_ITEM_ID" >> "$GITHUB_ENV"

      # Schritt 2: Teste den Zugriff auf die GitHub API mit dem PAT
      - name: Test PAT Access to GitHub API
        run: |
          # Teste Zugriff mit einer einfachen GraphQL-Anfrage (Viewer Login)
          RESPONSE=$(curl -H "Authorization: bearer ${{ secrets.PAT_TOKEN }}" \
                -X POST \
                -H "Content-Type: application/json" \
                -d '{"query": "query { viewer { login }}"}' \
                https://api.github.com/graphql)

          # Ausgabe der API-Antwort
          echo "GraphQL API Response: $RESPONSE"

          # Überprüfen, ob der Login erfolgreich abgerufen wurde
          LOGIN=$(echo "$RESPONSE" | jq -r .data.viewer.login)
          if [ "$LOGIN" != "null" ]; then
            echo "Success! PAT has access to GitHub API. Viewer login: $LOGIN"
          else
            echo "Error: Unable to access GitHub API with the provided PAT."
            exit 1
          fi

      # Schritt 3: Verwende die Field-ID, um die Optionen des Single-Select-Feldes abzurufen
      - name: Get Single-Select Field Options
        run: |
          # Füge die Project Number, den Benutzernamen und die Field-ID ein
          PROJECT_NUMBER="1"
          USER_NAME="yoo-gop"
          FIELD_ID="PVTSSF_lAHOB16rWM4ApMGwzggoz7Y"

          # Teste Zugriff auf die Optionen des spezifischen GitHub Project V2 Single-Select-Feldes
          RESPONSE=$(curl -H "Authorization: bearer ${{ secrets.PAT_TOKEN }}" \
                -X POST \
                -H "Content-Type: application/json" \
                -d "{\"query\": \"query { user(login: \\\"$USER_NAME\\\") { projectV2(number: $PROJECT_NUMBER) { fields(first: 10) { nodes { ... on ProjectV2SingleSelectField { id name options { id name } } } } } } }\"}" \
                https://api.github.com/graphql)

          # Ausgabe der API-Antwort
          echo "GraphQL API Response: $RESPONSE"

          # Verwende korrektes jq mit richtigem Escape der Anführungszeichen
          OPTION_ID=$(echo "$RESPONSE" | jq -r ".data.user.projectV2.fields.nodes[] | select(.id == \"$FIELD_ID\") | .options[] | select(.name == \"Backlog\") | .id")

          if [ "$OPTION_ID" != "" ]; then
            echo "Success! Found 'Backlog' option. Option ID: $OPTION_ID"
          else
            echo "Error: 'Backlog' option not found in the specified GitHub Project V2 for the given Field ID."
            exit 1
          fi

      # Schritt 4: Aktualisiere den Wert des Single-Select-Feldes auf 'Backlog'
      - name: Update Single-Select Field to 'Backlog'
        run: |
          PROJECT_ID="PVT_kwHOB16rWM4ApMGw"
          FIELD_ID="PVTSSF_lAHOB16rWM4ApMGwzggoz7Y"
          OPTION_ID="394f8d2b"
          
          echo "Project ID: $PROJECT_ID"
          echo "Item ID: $ITEM_ID"
          echo "Field ID: $FIELD_ID"
          echo "Option ID: $OPTION_ID"
        
          # Mutation zur Aktualisierung des Single-Select-Feldes
          RESPONSE=$(curl -H "Authorization: bearer ${{ secrets.PAT_TOKEN }}" \
                -X POST \
                -H "Content-Type: application/json" \
                -d "{\"query\": \"mutation { updateProjectV2ItemFieldValue(input: { projectId: \\\"$PROJECT_ID\\\", itemId: \\\"$ITEM_ID\\\", fieldId: \\\"$FIELD_ID\\\", value: { singleSelectOptionId: \\\"$OPTION_ID\\\" } }) { projectV2Item { id } } }\"}" \
                https://api.github.com/graphql)

          # Ausgabe der API-Antwort
          echo "Query: {\"query\": \"mutation { updateProjectV2ItemFieldValue(input: { projectId: 
          \\\"$PROJECT_ID\\\", itemId: \\\"$ITEM_ID\\\", fieldId: \\\"$FIELD_ID\\\", value: { singleSelectOptionId: \\\"$OPTION_ID\\\" } }) { projectV2Item { id } } }\"}"
          echo "GraphQL API Response: $RESPONSE"

          UPDATED_ITEM_ID=$(echo "$RESPONSE" | jq -r .data.updateProjectV2ItemFieldValue.projectV2Item.id)
          if [ "$UPDATED_ITEM_ID" != "null" ]; then
            echo "Success! Updated Single-Select field for item $ISSUE_NODE_ID to 'Backlog'."
          else
            echo "Error: Unable to update the Single-Select field for the specified item."
            exit 1
          fi
